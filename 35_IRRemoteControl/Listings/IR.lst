C51 COMPILER V9.54   IR                                                                    07/27/2023 01:26:22 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN .\Objects\IR.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE IR.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\IR.lst
                    -) OBJECT(.\Objects\IR.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Timer0.h"
   3          #include "Int0.h"
   4          
   5          unsigned int IR_Time;
   6          unsigned char IR_State;
   7          // 0 FREE Mode, Recieve Down -> State 1
   8          // 1 SEARCHING for START/REPEAT, Start Timer -> State 2/3
   9          // 2 START, Decode Information 32 bits
  10                  // 32 Times Read Information -> Data (With Pointer) -> Chceck -> Data Flag -> State 0
  11          // 3 REPEAT, Set Flag -> State 0
  12          
  13          unsigned char IR_Data[4]; // 4 represent 32 bits
  14          unsigned char IR_pData; // Position
  15          
  16          unsigned char IR_DataFlag; // Finish Flag
  17          unsigned char IR_RepeatFlag; 
  18          
  19          unsigned char IR_Address;
  20          unsigned char IR_Command;
  21          
  22          void IR_Init()
  23          {
  24   1              Timer0_Init();
  25   1              Int0_Init();
  26   1      }
  27          
  28          unsigned char IR_GetDataFlag()
  29          {
  30   1              if (IR_DataFlag)
  31   1              {
  32   2                      IR_DataFlag = 0;
  33   2                      return 1;
  34   2              }
  35   1              
  36   1              return 0;
  37   1      }
  38          
  39          unsigned char IR_GetRepeatFlag()
  40          {
  41   1              if (IR_RepeatFlag)
  42   1              {
  43   2                      IR_RepeatFlag = 0;
  44   2                      return 1;
  45   2              }
  46   1              return 0;
  47   1      }
  48          
  49          unsigned char IR_GetAddress()
  50          {
  51   1              return IR_Address;
  52   1      }
  53          
  54          unsigned char IR_GetCommand()
C51 COMPILER V9.54   IR                                                                    07/27/2023 01:26:22 PAGE 2   

  55          {
  56   1              return IR_Command;
  57   1      }
  58          
  59          // Interrupt, Detected Down
  60          void Int0_Routine() interrupt 0
  61          {
  62   1              // Free Mode
  63   1              if (IR_State == 0) 
  64   1              {
  65   2                      Timer0_SetCounter(0);
  66   2                      Timer0_Run(1);
  67   2                      IR_State = 1;
  68   2              }
  69   1              // SEARCHING for START/REPEAT
  70   1              else if(IR_State == 1)
  71   1              {
  72   2                      IR_Time = Timer0_GetCounter();
  73   2                      Timer0_SetCounter(0);
  74   2                      
  75   2                      // START Signal
  76   2                      if(IR_Time > 12442 - 500 && IR_Time < 12442 + 500) 
  77   2                      {
  78   3                              IR_State = 2;
  79   3                      }
  80   2                      // REPEAT Signal
  81   2                      else if (IR_Time > 10368 - 500 && IR_Time < 10368 + 500)
  82   2                      {
  83   3                              IR_RepeatFlag = 1;
  84   3                              Timer0_Run(0); // Stop Timer
  85   3                              IR_State = 0; // FREE
  86   3                      }
  87   2                      // ERROR
  88   2                      else
  89   2                      {
  90   3                              IR_State = 1; // SEARCHING for START/REPEAT
  91   3                      }
  92   2              }
  93   1              // START Signal -READ DATA
  94   1              else if(IR_State == 2)
  95   1              {
  96   2                      // Take Time Out And Clear
  97   2                      IR_Time = Timer0_GetCounter();
  98   2                      Timer0_SetCounter(0);
  99   2                      
 100   2                      // 0
 101   2                      if(IR_Time > 1032 - 500 && IR_Time < 1032 + 500) 
 102   2                      {
 103   3                              // Clear this to 0
 104   3                              // IR_pData / 8 select which item in Array
 105   3                              // IR_pData % 8 Select Bit in item
 106   3                              IR_Data[IR_pData / 8] &= ~(0x01 << IR_pData % 8);
 107   3                              IR_pData ++;
 108   3                      }
 109   2                      // 1
 110   2                      else if(IR_Time > 2074 - 500 && IR_Time < 2074 + 500) 
 111   2                      {
 112   3                              // Clear this to 0
 113   3                              // IR_pData / 8 select which item in Array
 114   3                              // IR_pData % 8 Select Bit in item
 115   3                              IR_Data[IR_pData / 8] |= (0x01 << IR_pData % 8);
 116   3                              IR_pData ++;
C51 COMPILER V9.54   IR                                                                    07/27/2023 01:26:22 PAGE 3   

 117   3                      }
 118   2                      // ERROE
 119   2                      else
 120   2                      {
 121   3                              IR_pData = 0;
 122   3                              IR_State = 1;
 123   3                      }
 124   2                      // Finish Collecting
 125   2                      if (IR_pData >= 32)
 126   2                      {
 127   3                              IR_pData = 0;
 128   3                              // Verify Data
 129   3                              if ((IR_Data[0] == ~IR_Data[1]) && (IR_Data[2] == ~IR_Data[3]))
 130   3                              {
 131   4                                      IR_Address = IR_Data[0];
 132   4                                      IR_Command = IR_Data[2];
 133   4                                      IR_DataFlag = 1;
 134   4                              }
 135   3                              Timer0_Run(0);
 136   3                              IR_State = 0; // Return to Idle
 137   3                      }
 138   2              }
 139   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    370    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
