C51 COMPILER V9.54   DS1302                                                                07/16/2023 20:12:49 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE DS1302
OBJECT MODULE PLACED IN .\Objects\DS1302.obj
COMPILER INVOKED BY: C:\Keil5\C51\BIN\C51.EXE DS1302.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\DS13
                    -02.lst) OBJECT(.\Objects\DS1302.obj)

line level    source

   1          #include <REGX52.H>
   2          
   3          sbit DS1302_SCLK = P3^6;
   4          sbit DS1302_IO = P3^4;
   5          sbit DS1302_CE = P3^5;
   6          
   7          
   8          // These Address are for write, conde in read has |= 0x01 to make them into read
   9          #define DS1302_SECOND           0x80
  10          #define DS1302_MINUTE           0x82
  11          #define DS1302_HOUR                     0x84
  12          #define DS1302_DATE                     0x86
  13          #define DS1302_MONTH            0x88
  14          #define DS1302_DAY                      0x8A
  15          #define DS1302_YEAR                     0x8C
  16          #define DS1302_WP                       0x8E
  17          
  18          unsigned char DS1302_Time[] = {23, 7, 16, 12, 59, 55, 7};
  19          
  20          void DS1302_Init()
  21          {
  22   1              DS1302_CE = 0;
  23   1              DS1302_SCLK = 0;
  24   1      }
  25          
  26          
  27          void DS1302_WriteByte(unsigned char Command, Data)
  28          {
  29   1              unsigned char i;
  30   1              DS1302_CE = 1; // Enable
  31   1              
  32   1              // Input Byte Command
  33   1              for (i = 0; i < 8; i ++)
  34   1              {
  35   2              // Input one bit
  36   2              DS1302_IO = Command&(0x01<<i); // 0000 0001
  37   2              // Move Clock
  38   2              DS1302_SCLK = 1; // May need a dalay is Hz is high
  39   2              DS1302_SCLK = 0;
  40   2              }       
  41   1              
  42   1              
  43   1              // Input Byte Data
  44   1              for (i = 0; i < 8; i ++)
  45   1              {
  46   2              // Input one bit
  47   2              DS1302_IO = Data&(0x01<<i); // 0000 0001
  48   2              // Move Clock
  49   2              DS1302_SCLK = 1; // May need a dalay is Hz is high
  50   2              DS1302_SCLK = 0;
  51   2              }       
  52   1              
  53   1              DS1302_CE = 0; // Diable
  54   1      }
C51 COMPILER V9.54   DS1302                                                                07/16/2023 20:12:49 PAGE 2   

  55          
  56          
  57          unsigned char DS1302_ReadByte(unsigned char Command)
  58          {
  59   1              // This has one less period
  60   1              unsigned char i, Data = 0x00;
  61   1              Command |= 0x01; // Make sure it is read
  62   1              DS1302_CE = 1; // Enable
  63   1              
  64   1              // Input Byte Command
  65   1              for (i = 0; i < 8; i ++)
  66   1              {
  67   2              // Input one bit
  68   2              DS1302_IO = Command&(0x01<<i); // 0000 0001
  69   2              // Move Clock
  70   2              DS1302_SCLK = 0; // !!!! This make clock end in middle of down up
  71   2              DS1302_SCLK = 1; 
  72   2              }
  73   1              
  74   1              // Give control to DS1302, Load Data in to return
  75   1              for (i = 0; i < 8; i ++)
  76   1              {
  77   2                      DS1302_SCLK = 1; // Althuogh Doubled, this order make sense
  78   2                      DS1302_SCLK = 0;
  79   2                      if (DS1302_IO){Data = Data|(0x01<<i);}
  80   2              }
  81   1              
  82   1              DS1302_CE = 0; // Disable
  83   1              DS1302_IO = 0;
  84   1              return Data;
  85   1      }
  86          
  87          void DS1302_SetTime()
  88          {
  89   1              DS1302_WriteByte(DS1302_WP, 0x00); // Disable Write Protection
  90   1              DS1302_WriteByte(DS1302_YEAR, DS1302_Time[0]/10*16 + DS1302_Time[0]%10); // DEC to BCD
  91   1              DS1302_WriteByte(DS1302_MONTH, DS1302_Time[1]/10*16 + DS1302_Time[1]%10);
  92   1              DS1302_WriteByte(DS1302_DATE, DS1302_Time[2]/10*16 + DS1302_Time[2]%10);
  93   1              DS1302_WriteByte(DS1302_HOUR, DS1302_Time[3]/10*16 + DS1302_Time[3]%10);
  94   1              DS1302_WriteByte(DS1302_MINUTE, DS1302_Time[4]/10*16 + DS1302_Time[4]%10);
  95   1              DS1302_WriteByte(DS1302_SECOND, DS1302_Time[5]/10*16 + DS1302_Time[5]%10);
  96   1              DS1302_WriteByte(DS1302_DAY, DS1302_Time[6]/10*16 + DS1302_Time[6]%10);
  97   1              DS1302_WriteByte(DS1302_WP, 0x80); // Enable Write Protection
  98   1      }
  99          
 100          void DS1302_ReadTime()
 101          {
 102   1              unsigned char Temp;
 103   1              Temp = DS1302_ReadByte(DS1302_YEAR);
 104   1              DS1302_Time[0] = Temp / 16 * 10 + Temp % 16; // BCD to DEC
 105   1              Temp = DS1302_ReadByte(DS1302_MONTH);
 106   1              DS1302_Time[1] = Temp / 16 * 10 + Temp % 16; 
 107   1              Temp = DS1302_ReadByte(DS1302_DATE);
 108   1              DS1302_Time[2] = Temp / 16 * 10 + Temp % 16; 
 109   1              Temp = DS1302_ReadByte(DS1302_HOUR);
 110   1              DS1302_Time[3] = Temp / 16 * 10 + Temp % 16; 
 111   1              Temp = DS1302_ReadByte(DS1302_MINUTE);
 112   1              DS1302_Time[4] = Temp / 16 * 10 + Temp % 16; 
 113   1              Temp = DS1302_ReadByte(DS1302_SECOND);
 114   1              DS1302_Time[5] = Temp / 16 * 10 + Temp % 16; 
 115   1              Temp = DS1302_ReadByte(DS1302_DAY);
 116   1              DS1302_Time[6] = Temp / 16 * 10 + Temp % 16; 
C51 COMPILER V9.54   DS1302                                                                07/16/2023 20:12:49 PAGE 3   

 117   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    551    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
